Learn GraphQL in 4 Hours - From Beginner to Expert (https://www.youtube.com/watch?v=yqWzCV0kU_c)

https://github.com/machadop1407/graphql-full-course/tree/lab6
https://github.com/Annie-Huang/graphql-full-course

Start from lab6, where is got all the server side setup.

https://www.apollographql.com/docs/react/
https://www.apollographql.com/docs/react/get-started/
https://www.apollographql.com/docs/react/data/queries/#manual-execution-with-uselazyquery

------------------------------------------------------------------------------

PS C:\react\graphql-full-course\server> npm install
PS C:\react\graphql-full-course\server> npm install lodash
PS C:\react\graphql-full-course\server> npm run start
http://localhost:1338/

PS C:\react\graphql-full-course\client> npx create-react-app .
Delete yarn.lock
PS C:\react\graphql-full-course\client> npm install
PS C:\react\graphql-full-course\client> npm start
http://localhost:3000/
PS C:\react\graphql-full-course\client> npm install @apollo/client


Other resource:
https://github.com/mguay22/react-apollo/blob/main/src/hooks/posts/useGetPosts.ts
    - From 'Best React Project Structure | TypeScript + Apollo Client + React Router' in youtube by Michael Guay
    - Look at app.component.tsx, home.page.tsx, posts-form.component.tsx, useCreatePost.ts
    - Syntax is very complicated and the author didn't explain it well why we need this.

https://github.com/machadop1407/GraphQL-ApolloClient-Template/tree/main
    - From 'GraphQL With React Tutorial - Apollo Client' in youtube by PedroTech
    - https://github.com/Annie-Huang/GraphQL-ApolloClient-Template

Apollo Client Queries with React and Apollo Server (useQuery, useLazyQuery)
    - https://www.youtube.com/watch?v=V8GVmy_Up0o
    - https://github.com/Annie-Huang/graphql-apollo-client-queries

GraphQL Crash Course With Full Stack MERN Project (Traversy Media)
    - https://www.youtube.com/watch?v=BcLNfwF04Kw
    - https://github.com/Annie-Huang/project-mgmt-graphql-cloned
    - The ClientRow.jsx got method to refetchQueries or udpate cache.
    - The safely replace cache method when update id done in App.js's cache object
    - Good info about how to do mutation from a form: AddClientModal.jsx
    - When finish deletion, move to another page through 'onCompleted: () => navigate('/'),' in DeleteButton.jsx
    - Delete a client will also delete projects associated with the client: 'refetchQueries: [{ query: GET_CLIENTS }, { query: GET_PROJECTS }],' in ClientRow.jsx

Use cache.modify to update query after mutation with Apollo Client 3 (Wojciech Matuszewski)
    - https://www.youtube.com/watch?v=PK1V0Vg8C5s
    - const {data: messagesData, loading: messagesLoading, error: messagesError} = useQuery(MESSAGES_QUERY)
      const [postMessage, {loading: postMessageLoading, error: postMessageError}] = useMutation(MESSAGES_MUTATION)
      async function handleOnMessage(content: string) {
        try {
          await postMessage({
            variables: { input: {content} }
            update: (cache, {data}) => {    // data is the data return from the mutation.

              // Before apollo client 3, you would use cache.readQuery(...) + cache.writeQuery(...) to update the data.
              const cacheId = cache.indentify(data.message)     // Get the cache ID
              cache.modify({
                fields: {
                  messages: (existingFieldData, { toReference }) => {
                    return [...existingFieldData, toReference(cacheID)]
                  }
                }
              })
            }
          })
        }
      }

Apollo Client Mutations: Execute, Refetch, and Update Cache
    - https://www.youtube.com/watch?v=u3DW549nNv0
    - const [createFeed, {data, loading, error}] = useMutation(CREATE_LINK_MUTATION, {
        update(cache, {data: {postAnyonymous}}) {

          // Read the existing feed from the cache
          const existingData = cache.readQuery<{feed: {links: Link[]}}>({
            query: GET_FEED,
            variables: {
              sortBy: { createdAt: 'asc'},
            }, // Ensure you include the variables
          })

          if(existingData && existingData.feed) {
            // Update the cache with the new link
            cache: writeQuery({
              query: GET_FEED,
              data: {
                feed: {
                  ...existingData.feed,
                  links: [
                    ...existingData.feed.links,
                    postAnonymous,
                  ]
                }
              },
              variables: {
                sortBy: { createdAt: 'asc'},
              }, // Ensure you include the variables
            });
          }
        }
      });
